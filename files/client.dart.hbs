// ignore_for_file: constant_identifier_names
import 'dart:async';
import 'dart:convert';

import 'base_client.dart';
import 'interface.dart';
import 'models.dart';

{{#if (isNotEmpty s3Providers)}}
const s3Providers = {
{{#each s3Providers}}
  '{{name}}': {
    'useSSL': {{useSSL}},
    'bucketName': '{{getVariableString bucketName}}',
    'endpoint': '{{getVariableString endpoint}}',
  },
{{/each}}
};
{{/if}}

class FireboomClient extends BaseClient {
  FireboomClient(BaseClientOptions options): super(options);
	Future<TransformedResponse<Response>> query<T extends BaseOperation<BaseInput, Response>, Response>(T options) {
    return super
      .doQuery(
        QueryRequestOptions(
          operationName: options.operationName,
          input: options.mapInput ?? options.input?.toJson(),
          cancelToken: options.cancelToken,
          useJson: options.useJson,
        ),
      ).then((ret) {
        if (!ret.error) {
          return TransformedResponse(
            error: false,
            data: options.fromJson(ret.data),
            statusCode: ret.statusCode,
          );
        }
        return TransformedResponse(
          error: true,
          message: ret.message,
          statusCode: ret.statusCode,
        );
      }
    );
  }

  Future<TransformedResponse<Response>> mutate<T extends BaseOperation<BaseInput, Response>, Response>(T options) {
    var input = options.mapInput ?? options.input?.toJson();
    return super.doMutate(
      MutationRequestOptions(
        operationName: options.operationName,
        input: options.removeNull != false ? super.removeNull(input) : input,
        cancelToken: options.cancelToken,
      ),
    ).then((ret) {
      if (!ret.error) {
        return TransformedResponse(
          error: false,
          data: options.fromJson(ret.data),
          statusCode: ret.statusCode,
        );
      }
      return TransformedResponse(
        error: true,
        message: ret.message,
        statusCode: ret.statusCode,
      );
    });
  }

  // SSE流转换器
  StreamTransformer<String, TransformedResponse<Response>> _sseTransformer<T extends BaseOperation<BaseInput, Response>, Response>(T options) =>
    StreamTransformer<String, TransformedResponse<Response>>.fromHandlers(
      handleData: (response, sink) async {
        try {
          if (response.startsWith('[error]: ')) {
            sink.add(TransformedResponse(
                error: true, message: response.substring(9)));
          } else {
            // 解码
            var lines =
                response.split('\n').where((line) => line.trim().isNotEmpty);
            for (var line in lines) {
              Map<String, dynamic> map = jsonDecode(line);
              if (map['errors'] != null) {
                sink.add(TransformedResponse(
                  error: true,
                  message: map['errors'].map((e) => e.message).join('\n'),
                ));
              } else if (map["data"] != null) {
                var result = options.fromJson(map["data"]);
                sink.add(TransformedResponse(error: false, data: result));
              }
            }
          }
        } catch (e) {
          sink.add(TransformedResponse(error: true, message: e.toString()));
        }
      },
    );

  Stream<TransformedResponse<Response>> subscribe<T extends BaseOperation<BaseInput, Response>, Response>(T options) async* {
    var sub = super.doSubscribe(
      SubscriptionRequestOptions(
        operationName: options.operationName,
        input: options.mapInput ?? options.input?.toJson(),
        cancelToken: options.cancelToken,
      ),
    );
    // 使用转换器转换SSE响应流
    var transformSub = sub.transform<TransformedResponse<Response>>(this._sseTransformer(options));

    yield* transformSub;
  }

	{{#if (isNotEmpty s3Providers)}}
	Future<TransformedResponse<List<String>>> uploadFiles(
      UploadRequestOptions config) async {
    // const profile = config.profile ? S3UploadProviderData[config.provider][config.profile as string] : undefined;
    var resp = await super.doUploadFiles(config);
    if (!resp.error) {
      var s3Config = s3Providers[config.provider];
      return TransformedResponse(
        error: false,
        data: resp.data!
            .map((key) =>
                '${s3Config!['useSSL'] == true ? 'https' : 'http'}://${s3Config['bucketName']}.${s3Config['endpoint']}/${key}')
            .toList(),
        statusCode: resp.statusCode,
      );
    }
    return resp;
  }
	{{/if}}

	// login() {
	// 	return super.login();
	// }
  factory FireboomClient.createClient({BaseClientOptions? config}) {
    var client = FireboomClient(
      BaseClientOptions(
        baseURL: config?.baseURL ?? "http://localhost:9991",
        csrfEnabled: true,
        onInit: config?.onInit,
      ),
    );

    return client;
  }
}

{{#each operations}}
{{#if (invertBool isInternal)}}
class {{upperFirst name}} extends BaseOperation<{{#if hasInput}}{{name}}Input{{else}}EmptyInput{{/if}}, {{name}}ResponseData> {
  {{#if hasInput}}{{name}}Input{{else}}EmptyInput{{/if}}? input;
  {{upperFirst name}}({
    this.input,
    super.cancelToken,
    super.mapInput,
    super.useJson,
    super.removeNull,
  })
    : super("{{path}}", OperationMetadataItem(requiresAuthentication: {{authRequired}}), input: input );

  @override
  {{name}}ResponseData fromJson(Map<String, dynamic> json) {
    {{#if (equalAny engine 2)}}
    return json;
    {{else}}
    return {{name}}ResponseData.fromJson(json);
    {{/if}}
  }
}
{{/if}}
{{/each}}