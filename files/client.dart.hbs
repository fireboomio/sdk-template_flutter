// ignore_for_file: constant_identifier_names
import 'base_client.dart';
import 'interface.dart';
import 'models.dart';

class FireboomClient extends BaseClient {
  FireboomClient(BaseClientOptions options): super(options);
	Future<TransformedResponse> query(QueryRequestOptions options) {
		return super.query(options);
	}
	Future<TransformedResponse> mutate(OperationRequestOptions options) {
		return super.mutate(options);
	}
	Future<void> subscribe(
		String operationName, Map<String, dynamic>? input,
      void Function(TransformedResponse) cb
	) {
		return super.subscribe(operationName, input, cb);
	}
	{{#if (isNotEmpty s3Providers)}}
	// uploadFiles(UploadRequestOptions config) async {
  //   const profile = config.profile ? S3UploadProviderData[config.provider][config.profile as string] : undefined;
	//	 return super.uploadFiles(config, profile);
	// }
	{{/if}}
	// login() {
	// 	return super.login();
	// }
  factory FireboomClient.createClient({ BaseClientOptions? config }) {
    return FireboomClient(BaseClientOptions(
      baseURL: config?.baseURL ?? "{{baseURL}}",
      csrfEnabled: {{isNotEmpty authProviders}}
      ));
  }
}

{{#with (filterOperations operations 'isQuery,!isInternal' true)}}
{{#if (isNotEmpty this)}}
enum Queries {
  {{#each this}}
  {{name}}("{{path}}", {{#if hasInput}}{{name}}Input{{else}}null{{/if}}, {{name}}ResponseData, OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}})){{#if @last}};{{else}},{{/if}}
  {{/each}}

  final String operationName;
  final Object? input;
  final Object data;
  final OperationMetadataItem options;
  const Queries(this.operationName, this.input, this.data, this.options);
}
{{/if}}
{{/with}}

{{#with (filterOperations operations 'isMutation,!isInternal' true)}}
{{#if (isNotEmpty this)}}
enum Mutations {
  {{#each this}}
  {{name}}("{{path}}", {{#if hasInput}}{{name}}Input{{else}}null{{/if}}, {{name}}ResponseData, OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}})){{#if @last}};{{else}},{{/if}}
  {{/each}}

  final String operationName;
  final Object? input;
  final Object data;
  final OperationMetadataItem options;
  const Mutations(this.operationName, this.input, this.data, this.options);
}
{{/if}}
{{/with}}

{{#with (filterOperations operations 'isSubscription,!isInternal' true)}}
{{#if (isNotEmpty this)}}
//enum Subscriptions {
  {{#each this}}
  //{{name}}("{{path}}", {{#if hasInput}}{{name}}Input{{else}}null{{/if}}, {{name}}ResponseData, OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}})){{#if @last}};{{else}},{{/if}}
  {{/each}}

  // final String operationName;
  //final Object? input;
  //final Object data;
  //final OperationMetadataItem options;
  //const Subscriptions(this.operationName, this.input, this.data, this.options);
//}
{{/if}}
{{/with}}

{{#with (filterOperations operations 'isMutation,isLiveQuery,!isInternal' true)}}
{{#if (isNotEmpty this)}}
enum LiveQueries {
  {{#each this}}
  {{name}}("{{path}}", {{#if hasInput}}{{name}}Input{{else}}null{{/if}}, {{name}}ResponseData, OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}})){{#if @last}};{{else}},{{/if}}
  {{/each}}

  final String operationName;
  final Object? input;
  final Object data;
  final OperationMetadataItem options;
  const LiveQueries(this.operationName, this.input, this.data, this.options);
}
{{/if}}
{{/with}}