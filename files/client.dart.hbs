import 'base_client.dart';
import 'interface.dart';
import 'models.dart';


class FireboomClient extends BaseClient {
  FireboomClient(BaseClientOptions options): super(options);
	Future<TransformedResponse> query(QueryRequestOptions options) {
		return super.query(options);
	}
	Future<TransformedResponse> mutate(OperationRequestOptions options) {
		return super.mutate(options);
	}
	Future<void> subscribe(
		String operationName, Map<String, dynamic>? input,
      void Function(TransformedResponse) cb
	) {
		return super.subscribe(operationName, input, cb);
	}
	{{#if (isNotEmpty s3Providers)}}
	uploadFiles(UploadRequestOptions config) async {
		// const profile = config.profile ? S3UploadProviderData[config.provider][config.profile as string] : undefined;
		return super.uploadFiles(config, profile);
	}
	{{/if}}
	// login() {
	// 	return super.login();
	// }
  factory FireboomClient.createClient(BaseClientOptions? config) {
    return FireboomClient(BaseClientOptions(
      baseURL: config?.baseURL ?? "{{baseURL}}",
      csrfEnabled: {{isNotEmpty authProviders}}
      ));
  }
}

enum Queries {
  {{#each (filterOperations operations 'isQuery,!isInternal' true)}}
  {{name}}({{#if hasInput}}{{name}}Input{{else}}null{{/if}}, {{name}}ResponseData, OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}})){{#if @last}};{{else}},{{/if}}
  {{/each}}

  final dynamic input;
  final dynamic data;
  final OperationMetadataItem options;
  const Queries(this.input, this.data, this.options);
}

enum Mutations {
  {{#each (filterOperations operations 'isMutation,!isInternal' true)}}
  {{name}}({{#if hasInput}}{{name}}Input{{else}}null{{/if}}, {{name}}ResponseData, OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}})){{#if @last}};{{else}},{{/if}}
  {{/each}}

  final dynamic input;
  final dynamic data;
  final OperationMetadataItem options;
  const Mutations(this.input, this.data, this.options);
}

enum Subscriptions {
  {{#each (filterOperations operations 'isSubscription,!isInternal' true)}}
  {{name}}({{#if hasInput}}{{name}}Input{{else}}null{{/if}}, {{name}}ResponseData, OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}})){{#if @last}};{{else}},{{/if}}
  {{/each}}

  final dynamic input;
  final dynamic data;
  final OperationMetadataItem options;
  const Subscriptions(this.input, this.data, this.options);
}

enum LiveQueries {
  {{#each (filterOperations operations 'isMutation,isLiveQuery,!isInternal' true)}}
  {{name}}({{#if hasInput}}{{name}}Input{{else}}null{{/if}}, {{name}}ResponseData, OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}})){{#if @last}};{{else}},{{/if}}
  {{/each}}

  final dynamic input;
  final dynamic data;
  final OperationMetadataItem options;
  const LiveQueries(this.input, this.data, this.options);
}