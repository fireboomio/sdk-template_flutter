// ignore_for_file: constant_identifier_names
import 'dart:convert';

import 'base_client.dart';
import 'interface.dart';
import 'models.dart';

class FireboomClient extends BaseClient {
  FireboomClient(BaseClientOptions options): super(options);
	Future<TransformedResponse<Response>>
      query<T extends BaseOperation<BaseInput, Response>, Response>(T options) {
    return super
        .doQuery(QueryRequestOptions(
            operationName: options.operationName,
            input: options.input?.toJson(),
            cancelToken: options.cancelToken,
          ))
        .then((ret) {
      TransformedResponse resp = ret;
      if (!ret.error) {
        return TransformedResponse(
            error: false, data: options.fromJson(ret.data));
      }
      return TransformedResponse(error: true, message: ret.message);
    });
  }

  Future<TransformedResponse<Response>>
      mutate<T extends BaseOperation<BaseInput, Response>, Response>(T options) {
    return super
        .doMutate(MutationRequestOptions(
            operationName: options.operationName,
            input: options.input?.toJson(),
            cancelToken: options.cancelToken,
          ))
        .then((ret) {
      TransformedResponse resp = ret;
      if (!ret.error) {
        return TransformedResponse(
            error: false, data: options.fromJson(ret.data));
      }
      return TransformedResponse(error: true, message: ret.message);
    });
  }

	Stream<Response>
      subscribe<T extends BaseOperation<BaseInput, Response>, Response>(
          T options) async* {
    var sub = super.doSubscribe(SubscriptionRequestOptions(
      operationName: options.operationName,
      input: options.input?.toJson(),
      cancelToken: options.cancelToken,
    ));
    await for (var data in sub) {
      try {
        Map<String, dynamic> map = jsonDecode(data);
        yield options.fromJson(map);
      } catch (e) {
        // do nothing
      }
    }
  }

	{{#if (isNotEmpty s3Providers)}}
	// uploadFiles(UploadRequestOptions config) async {
  //   const profile = config.profile ? S3UploadProviderData[config.provider][config.profile as string] : undefined;
	//	 return super.uploadFiles(config, profile);
	// }
	{{/if}}
	// login() {
	// 	return super.login();
	// }
  factory FireboomClient.createClient({ BaseClientOptions? config }) {
    return FireboomClient(BaseClientOptions(
      baseURL: config?.baseURL ?? "{{baseURL}}",
      csrfEnabled: {{isNotEmpty authProviders}}
      ));
  }
}

{{#with (filterOperations operations '!isInternal' true)}}
{{#if (isNotEmpty this)}}
{{#each this}}
class {{upperFirst name}} extends BaseOperation<{{#if hasInput}}{{name}}Input{{else}}EmptyInput{{/if}}, {{name}}ResponseData> {
  {{#if hasInput}}{{name}}Input{{else}}EmptyInput{{/if}}? input;
  {{upperFirst name}}({ this.input })
    : super("{{path}}", OperationMetadataItem(requiresAuthentication: {{requiresAuthentication}}), input: input );

  @override
  {{name}}ResponseData fromJson(Map<String, dynamic> json) {
    return {{name}}ResponseData.fromJson(json);
  }
}
{{/each}}
{{/if}}
{{/with}}